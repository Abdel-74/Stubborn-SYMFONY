{% extends 'base.html.twig' %}

{% block title %}Détails du produit{% endblock %}

{% block stylesheets %}<link rel="stylesheet" href="{{ asset('css/productdetails.css') }}">{% endblock %}

{% block body %}
<h1>{{ product.name }}</h1>

<div class="product-details-container">
    <!-- Image du produit -->
    <div class="product-image">
        <img src="/images/{{ product.id }}.jpeg" alt="{{ product.name }}">
    </div>

    <!-- Informations du produit -->
    <div class="product-info">
        <p><strong>Prix :</strong> {{ product.price }} €</p>

        <!-- Sélection des tailles et quantités -->
        <form method="post" action="{{ path('app_product_add_to_cart', {id: product.id}) }}">
            <label for="size">Taille :</label>
            <select name="size" id="size">
                {% for item in sizesWithStocks %}
                    <option value="{{ item.size }}" data-stock="{{ item.stock }}">{{ item.size }}</option>
                {% endfor %}
            </select>

            <label for="quantity">Quantité :</label>
            <input type="number" name="quantity" id="quantity" value="1" min="1">

            <button type="submit">Ajouter au panier</button>
        </form>
    </div>
</div>

{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('turbo:load', function () {
            const sizeSelect = document.getElementById('size');
            const quantityInput = document.getElementById('quantity');

            if (sizeSelect && quantityInput) {
                const updateMaxQuantity = () => {
                    const selectedOption = sizeSelect.options[sizeSelect.selectedIndex];
                    const maxStock = parseInt(selectedOption.getAttribute('data-stock'), 10);
                    quantityInput.max = maxStock;

                    // Ajuster la valeur si elle dépasse le max
                    if (quantityInput.value > maxStock) {
                        quantityInput.value = maxStock;
                    }
                };

                // Initialisation : définir le max en fonction de la taille sélectionnée par défaut
                updateMaxQuantity();

                // Mettre à jour le max chaque fois que la taille change
                sizeSelect.addEventListener('change', updateMaxQuantity);
            }
        });

    </script>
{% endblock %}
